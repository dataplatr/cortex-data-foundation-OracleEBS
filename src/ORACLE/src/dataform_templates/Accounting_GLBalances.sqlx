---------------------------------------------------------------------
-- Edw.Accounting_GLBalances.sqlx Loading script using Dataform
---------------------------------------------------------------------
config {
  type: "incremental",
  schema: "${edw_dataset}",
  tags: ["Finance-OracleDetail"],
  uniqueKey: ["GLBalanceKey"],
 
 
  assertions:{
    uniqueKey: ["GLBalanceKey"],
    nonNull:["GLBalanceKey"],
   
  }
}

with ffv as
(
select flex_value as LocationCode,
attribute16 as LegalEntityNumber 
from 
	$${ref("FND_FLEX_VALUES")} 
 WHERE flex_value_set_id = 1002610 --and InactiveInd = false 
)

SELECT
glb.ParentSystemId,
glb.SystemId,
glb.GLBalanceKey,
CAST(glb.LedgerId AS INT64) as LedgerId,
glb.CodeCombinationId,
glb.PeriodName,
glb.ActualFlag,
glb.LastUpdateDate,
glb.LastUpdatedBy,
glb.TranslatedFlag,
glb.RevaluationStatus,
glb.PeriodType,
glb.PeriodYear,
glb.PeriodNum,
glb.TransactionCurrency,
glb.TransCurrPeriodNetDr,
glb.TransCurrPeriodNetCr,
glb.TransCurrPeriodNet,
glb.TransCurrBeginBalanceDr,
glb.TransCurrBeginBalanceCr,
glb.TransCurrOpeningBalance,
glb.TransCurrEndingBalance,
glb.TransCurrQuarterToDateDr,
glb.TransCurrQuarterToDateCr,
glb.TransCurrQuarterToDate,
sum(glb.TransCurrPeriodNetDr) over (partition by glb.LedgerId,glb.CodeCombinationId,glb.TransactionCurrency,glb.PeriodYear,glb.ActualFlag order by glb.PeriodYear,glb.PeriodNum) TransCurrYearToDateDr,
sum(glb.TransCurrPeriodNetCr) over (partition by glb.LedgerId,glb.CodeCombinationId,glb.TransactionCurrency,glb.PeriodYear,glb.ActualFlag order by glb.PeriodYear,glb.PeriodNum)TransCurrYearToDateCr,
sum(glb.TransCurrPeriodNetCr) over (partition by glb.LedgerId,glb.CodeCombinationId,glb.TransactionCurrency,glb.PeriodYear,glb.ActualFlag order by glb.PeriodYear,glb.PeriodNum)TransCurrYearToDate,
glb.LedgerCurrency,
glb.LedgerCurrPeriodNetDr,
glb.LedgerCurrPeriodNetCr,
glb.LedgerCurrPeriodNet,
glb.LedgerCurrBeginBalanceDr,
glb.LedgerCurrBeginBalanceCr,
glb.LedgerCurrOpeningBalance,
glb.LedgerCurrEndingBalance,
glb.LedgerCurrQuarterToDateDr,
glb.LedgerCurrQuarterToDateCr,
glb.LedgerCurrQuarterToDate,
sum(glb.LedgerCurrPeriodNetDr) over (partition by glb.LedgerId,glb.CodeCombinationId,glb.TransactionCurrency,glb.PeriodYear,glb.ActualFlag order by glb.PeriodYear,glb.PeriodNum) LedgerCurrYearToDateDr,
sum(glb.LedgerCurrPeriodNetCr) over (partition by glb.LedgerId,glb.CodeCombinationId,glb.TransactionCurrency,glb.PeriodYear,glb.ActualFlag order by glb.PeriodYear,glb.PeriodNum) LedgerCurrYearToDateCr,
sum(LedgerCurrPeriodNet) over (partition by glb.LedgerId,glb.CodeCombinationId,glb.TransactionCurrency,glb.PeriodYear,glb.ActualFlag order by glb.PeriodYear,glb.PeriodNum) LedgerCurrYearToDate,
glb.BudgetVersionId,
glb.EncumbranceTypeId,
glb.EncumbranceDocId,
glb.EncumbranceLineNum,
cc.Location as LocationCode,
cc.Client as ClientCode,
cc.Department as DepartmentCode,
cc.Account as AccountCode,
cast(cc.Intercompany as string) as IntercompanyCode,
cast(cc.Future2  as string) as FutureCode,
cast(ffv.LegalEntityNumber  as string) as LegalEntity,
glb.LoadBy,
glb.LoadDate,
glb.LoadProcess,
glb.CreateBy,
glb.CreateDate,
glb.CreateProcess,
glb.UpdateBy,
glb.UpdateDate,
glb.UpdateProcess,
glb.InactiveInd,
glb.InactiveDate,
glb.InactiveReason 
FROM
$${ref("${edw_dataset}","Accounting_GLBalancesDetails")} AS glb left outer join $${ref("${edw_dataset}","Accounting-CodeCombinationsDetails")} cc
on glb.codecombinationid=cc.codecombinationid --and cc.InactiveInd=false
 left outer join ffv on cc.Location=ffv.LocationCode
where 
PeriodYear >= ifnull((SELECT MAX(PeriodYear) FROM $${self()}),0)