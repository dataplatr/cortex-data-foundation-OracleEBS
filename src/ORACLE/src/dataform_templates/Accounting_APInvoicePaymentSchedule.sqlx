---------------------------------------------------------------------
-- Edw.Accounting_APInvoicePaymentSchedule.sqlx Loading script using Dataform
---------------------------------------------------------------------
config {
  type: "incremental",
  schema: "${edw_dataset}",
  tags: ["Finance-OracleDetail"],
  uniqueKey: ["InvoiceId","PaymentNumber"],

  assertions:{
    uniqueKey: ["InvoiceId","PaymentNumber"],
    nonNull:["InvoiceId","PaymentNumber"],
  }
}

Select 
sch.ParentSystemId,	
sch.SystemId,	
sch.InvoiceId,	
sch.LastUpdatedBy,	
sch.LastUpdatedDate,	
sch.PaymentCrossRate,	
sch.PaymentNumber,	
sch.AmountRemaining,	
sch.AmountRemaining*cast(sch.ConversionRate as numeric) as AmountRemainingUSD,
sch.CreatedBy,	
sch.CreatedDate,	
sch.DiscountDate,	
sch.DueDate,	
EXTRACT(YEAR FROM DueDate) as DueDateYear,
EXTRACT(QUARTER FROM DueDate) as DueDateQuarter,
EXTRACT(MONTH FROM DueDate) as DueDatePeriodNum,
upper(FORMAT_DATETIME('%b-%y', DueDate)) as DueDatePeriod,
sch.FuturePayDueDate,	
sch.GrossAmount,	
sch.GrossAmount*cast(sch.ConversionRate  as numeric) as GrossAmountUSD,	
sch.HoldFlag,	
sch.LastUpdateLogin,	
sch.PaymentMenthodLookupCode,	
sch.PaymentPriority,	
sch.PaymentStatusFlag,	
sch.SecondDiscountDate,	
sch.ThirdDiscountDate,	
sch.BatchId,	
sch.DiscountAmountAvailable,	
sch.SecondDiscAmtAvailable,	
sch.ThirdDiscAmtAvailable,		
sch.AttributeCategory,	
sch.DiscountAmountRemaining,	
sch.OrgId,	
sch.GlobalAttributeCategory,		
sch.ExternalBankAccountId,	
sch.InvCurrGrossAmount,	
sch.CheckrunId,	
sch.DbiEventCompleteFlag,	
sch.IbyHoldReason,	
sch.PaymentMethodCode,
sch.PaymentMethodName,	
sch.RemittanceMessage1,	
sch.RemittanceMessage2,	
sch.RemittanceMessage3,	
sch.RemitToSupplierName,	
sch.RemitToSupplierId,	
sch.RemitToSupplierSite,	
sch.RemitToSupplierSiteId,	
sch.RelationshipId,
sch.LedgerId,
sch.InvoiceNumber,
sch.InvoiceDate,
sch.OracleCreationDate,
sch.InvoiceDescription,
sch.InvoiceCurrencyCode,
sch.PaymentCurrencyCode,
sch.Source,
sch.VendorId,
sch.VendorSiteId,
cast(sch.ConversionRate  as numeric) as ConversionRate,
sch.LastPaymentDate,	
EXTRACT(YEAR FROM LastPaymentDate) as LastPaymentDateYear,
EXTRACT(QUARTER FROM LastPaymentDate) as LastPaymentDateQuarter,
EXTRACT(MONTH FROM LastPaymentDate) as LastPaymentDatePeriodNum,
upper(FORMAT_DATETIME('%b-%y', LastPaymentDate)) as LastPaymentDatePeriod,
sch.AmountPaid,
sch.AmountPaid * cast(sch.ConversionRate  as numeric) as AmountPaidUSD,
sch.LastAccountingDate,
(case when DATE(sch.LastPaymentDate)=sch.DueDate then  1 else 0 end) as OnTimePaymentIndicator,
(case when DATE(sch.LastPaymentDate)<sch.DueDate then  1 else 0 end) as EarlyPaymentIndicator,
(case when DATE(sch.LastPaymentDate)>sch.DueDate then  1 else 0 end) as LatePaymentIndicator,
(case when sch.LastPaymentDate is null and sch.DueDate <current_Date then 1 else 0 end) as OverduePaymentIndicator,
(case when sch.LastPaymentDate is null and sch.DueDate <current_Date then sch.AmountRemaining else 0 end) as OverdueAmount,
(case when sch.LastPaymentDate is null and sch.DueDate <current_Date then sch.AmountRemaining*cast(ConversionRate as numeric) else 0 end) as OverdueAmountUSD,
sch.LoadBy,	
sch.LoadDate,	
sch.LoadProcess,	
sch.CreateBy,	
sch.CreateDate,	
sch.CreateProcess,	
sch.UpdateBy,	
sch.UpdateDate,	
sch.UpdateProcess,	
sch.InactiveInd	,	
sch.InactiveDate,	
sch.InactiveReason
fromÂ $${ref("${edw_dataset}","Accounting_APInvoicePaymentScheduleDetails")} sch
where
 DATE(sch.LoadDate) > ifnull((SELECT DATE(MAX(LoadDate)) FROM $${self()}),'1900-01-01')