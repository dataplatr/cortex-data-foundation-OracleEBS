---------------------------------------------------------------------
-- Accounting_ARTransactionsDetails.sqlx Loading script using Dataform
---------------------------------------------------------------------
config {
  type: "incremental",
  schema: "${edw_dataset}",
  tags: ["Finance-OracleDetail"],

  assertions:{
    uniqueKey: ["ReceivableTransactionsKey"],
    nonNull:["ReceivableTransactionsKey"],
   
  }
}

with ffv as
(
select flex_value as LocationCode,
cast(attribute16 as string) as LegalEntityNumber 
from 
	$${ref("FND_FLEX_VALUES")} 
 WHERE flex_value_set_id = 1002610 and InactiveInd = false 
),

payments as 
(
SELECT
ARAA.APPLIED_CUSTOMER_TRX_ID,
MAX(ACR.RECEIPT_DATE) AS LastPaymentDate,
SUM(ACR.AMOUNT) AS PaymentAmount
FROM
  $${ref("AR_CASH_RECEIPTS_ALL")} ACR
INNER JOIN
  $${ref("AR_RECEIVABLE_APPLICATIONS_ALL")} ARAA
ON
  (ACR.CASH_RECEIPT_ID = ARAA.CASH_RECEIPT_ID
    AND ARAA.InactiveInd = FALSE and ACR.InactiveInd=FALSE)
GROUP BY ARAA.APPLIED_CUSTOMER_TRX_ID
) 


SELECT
  RCTD.ParentSystemId,
  RCTD.SystemId,
  CONCAT(RCT.CUSTOMER_TRX_ID,"-",RCTD.CUSTOMER_TRX_LINE_ID,'-',RCTD.CUST_TRX_LINE_GL_DIST_ID) AS ReceivableTransactionsKey,
  RCT.CUSTOMER_TRX_ID AS CustomerTransactionId,
  RCTL.CUSTOMER_TRX_LINE_ID CustomerTransactionLineId,
  CASE WHEN RCTL.LINE_TYPE = 'LINE' THEN 'REVENUE'  ELSE  RCTL.LINE_TYPE END AS LineType,
  RCTL.LINE_NUMBER AS LineNumber,
  RCTL.DESCRIPTION AS LineDescription,
  RCT.BILL_TO_CUSTOMER_ID AS BillToCustomerId,
  RCT.INTERFACE_HEADER_CONTEXT AS InterfaceHeaderContext,
  RCTD.GL_DATE AS GeneralLedgerDate,
  RCT.TRX_DATE AS TransactionDate,
  CAST(RCT.SET_OF_BOOKS_ID AS INT64) AS LedgerId,
  RCT.DOC_SEQUENCE_VALUE AS DocumentSequenceValue,
  RCT.TRX_NUMBER AS TransactionNumber,
  RCT.INVOICE_CURRENCY_CODE AS InvoiceCurrencyCode,
  CASE WHEN TR_TYPE.POST_TO_GL='Y' THEN 'Yes' ELSE 'No' END AS PostToGeneralLedgerFlag,
  RCTD.ACCOUNT_CLASS AS AccountClass,
  ffv.LegalEntityNumber AS LegalEntity,
  RCTD.CODE_COMBINATION_ID AS CodeCombinationId,
  COALESCE(GCC.SEGMENT1,'0') AS LocationCode,
  COALESCE(GCC.SEGMENT2,'0') AS ClientCode,
  batch.NAME as BatchSource,
  batch.DESCRIPTION as BatchSourceDescription,
  COALESCE(GCC.SEGMENT3,'0') AS DepartmentCode,
  COALESCE(GCC.SEGMENT4,'0') AS AccountCode,
  --COALESCE(GCC.SEGMENT5,'0') AS InterCompanyCode,
  --COALESCE(GCC.SEGMENT6,'0') AS Future2Code,
 COALESCE(GCC.SEGMENT5,'0') AS InterCompanyCode,
 COALESCE(GCC.SEGMENT6,'0') AS Future2Code,
  ifnull(rates.CONVERSION_RATE,1)  as  ConversionRate,
  CASE WHEN RCTL.LINE_TYPE = 'TAX'THEN RCTL.TAX_RATE END as TaxRate,
  CASE WHEN RCTL.LINE_TYPE = 'TAX'THEN RCTL.EXTENDED_AMOUNT END as ExtendedAmountTax,
  RCTD.AMOUNT AS Amount,
  ROW_NUMBER() OVER(PARTITION BY RCT.CUSTOMER_TRX_ID ORDER BY RCTL.LINE_TYPE, RCT.CUSTOMER_TRX_ID,RCTD.CUSTOMER_TRX_LINE_ID,RCTD.CUST_TRX_LINE_GL_DIST_ID) as LineRank,
  payments.PaymentAmount,
  payments.LastPaymentDate,
  GLP.PERIOD_NAME AS PeriodName,
  GLP.PERIOD_YEAR AS PeriodYear,
  RCT.Last_updated_by AS LastUpdatedById,
  USER1.USER_NAME AS LastUpdatedByName,
  RCT.created_by AS CreateById,
  USER2.USER_NAME AS CreateByName,
  RCTD.LoadBy,
  RCTD.LoadDate,
  RCTD.LoadProcess,
  RCTD.CreateBy,
  RCTD.CreateDate,
  RCTD.CreateProcess,
  RCTD.UpdateBy,
  RCTD.UpdateDate,
  RCTD.UpdateProcess,
  RCTD.InactiveInd,
  RCTD.InactiveDate,
  RCTD.InactiveReason
FROM
  $${ref("RA_CUSTOMER_TRX_ALL")} AS RCT
INNER JOIN
  $${ref("RA_CUSTOMER_TRX_LINES_ALL")} AS RCTL
ON ( RCT.CUSTOMER_TRX_ID = RCTL.CUSTOMER_TRX_ID)
INNER JOIN
 $${ref("RA_CUST_TRX_LINE_GL_DIST_ALL")} AS RCTD
ON (RCT.CUSTOMER_TRX_ID = RCTD.CUSTOMER_TRX_ID AND RCTD.CUSTOMER_TRX_LINE_ID = RCTL.CUSTOMER_TRX_LINE_ID )
LEFT OUTER JOIN
  $${ref("RA_CUST_TRX_TYPES_ALL")} AS TR_TYPE
ON
  (RCT.CUST_TRX_TYPE_ID = TR_TYPE.CUST_TRX_TYPE_ID
  AND RCT.SET_OF_BOOKS_ID = TR_TYPE.SET_OF_BOOKS_ID
    AND TR_TYPE.InactiveInd = FALSE)
LEFT OUTER JOIN
  $${ref("FND_USER")} AS USER1
ON
  (RCT.Last_updated_by = USER1.User_ID
    AND USER1.InactiveInd = FALSE)
LEFT OUTER JOIN
  $${ref("FND_USER")} AS USER2
ON
  (RCT.created_by=USER2.User_ID
    AND USER2.InactiveInd = FALSE)
LEFT OUTER JOIN
  $${ref("GL_CODE_COMBINATIONS")} GCC
ON
  (RCTD.CODE_COMBINATION_ID = GCC.CODE_COMBINATION_ID
   -- AND GCC.ENABLED_FLAG='Y'
    AND GCC.ENABLED_FLAG = 'TRUE'
    AND GCC.InactiveInd = FALSE)

left outer join ffv on COALESCE(GCC.SEGMENT1,'0')=ffv.LocationCode
left join  $${ref("GL_DAILY_RATES")} as rates
on date(rates.CONVERSION_DATE) = date(RCT.TRX_DATE) and rates.FROM_CURRENCY = RCT.INVOICE_CURRENCY_CODE
and rates.CONVERSION_TYPE = 'Spot'  and rates.TO_CURRENCY ='USD' and rates.InactiveInd=false
left outer join payments on (RCT.CUSTOMER_TRX_ID=payments.APPLIED_CUSTOMER_TRX_ID)
left outer join $${ref("RA_BATCH_SOURCES_ALL")} as batch on (batch.BATCH_SOURCE_ID=RCT.BATCH_SOURCE_ID and batch.InactiveInd=FALSE)
LEFT OUTER JOIN
  $${ref("GL_PERIODS")} GLP
ON
  (GLP.PERIOD_SET_NAME ='CORP CALENDAR'
  	AND GLP.PERIOD_TYPE='Month'
    AND (RCT.TRX_DATE BETWEEN GLP.START_DATE AND GLP.END_DATE)
    AND GLP.InactiveInd = FALSE)

WHERE  RCTD.CUST_TRX_LINE_GL_DIST_ID is not null and
DATE(RCTD.LoadDate) > ifnull((SELECT DATE(MAX(LoadDate)) FROM $${self()}),'1900-01-01')