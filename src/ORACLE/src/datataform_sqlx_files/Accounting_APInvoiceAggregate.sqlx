---------------------------------------------------------------------
-- Edw.Accounting_APInvoiceAggregate.sqlx Loading script using Dataform
---------------------------------------------------------------------
config {
  type: "incremental",
  schema: "EdwBI",
  tags: ["Finance-OracleDetail1"],
  uniqueKey: ["LedgerId","VendorId","VendorSiteId","OrganisationId","LegalEntityId","OperatingUnitName","AccountsPayCodeCombinationId","PayGroupLookupCode","PaymentMethodName","TermsId","InvoiceTypeLookupCode","Source","CurrencyCode","GLDatePeriod","InvoiceDateYear","InvoiceDatePeriod","InvoiceCreationPeriod"],

  assertions:{
    uniqueKey: ["LedgerId","VendorId","VendorSiteId","OrganisationId","LegalEntityId","OperatingUnitName","AccountsPayCodeCombinationId","PayGroupLookupCode","PaymentMethodName","TermsId","InvoiceTypeLookupCode","Source","CurrencyCode","GLDatePeriod","InvoiceDateYear","InvoiceDatePeriod","InvoiceCreationPeriod"],
    nonNull:["LedgerId","OrganisationId","CurrencyCode","GLDatePeriod","InvoiceDatePeriod","InvoiceCreationPeriod"],
  }
}

with inv_sch as
(
select
InvoiceID,
count(distinct PaymentNumber) as NumberOfPayment,
sum(case when DATE(sch.LastPaymentDate)=sch.DueDate then  1 else 0 end) as NumberOfOnTimePayment,
sum(case when DATE(sch.LastPaymentDate)<sch.DueDate then  1 else 0 end) as NumberOfEarlyPayment,
sum(case when DATE(sch.LastPaymentDate)>sch.DueDate then  1 else 0 end) as NumberOfLatePayment,
sum(case when sch.LastPaymentDate is null and sch.DueDate <current_Date then 1 else 0 end) as NumberOfOverduePayment,
sum(case when sch.LastPaymentDate is null and sch.DueDate <current_Date then sch.AmountRemaining else 0 end) as OverdueAmount,
sum(case when sch.LastPaymentDate is null and sch.DueDate <current_Date then sch.AmountRemaining * cast(sch.ConversionRate as numeric) else 0 end) as OverdueAmountUSD
from ${ref("Edw","Accounting_APInvoicePaymentSchedule")} sch
where sch.InactiveInd=false
group by InvoiceId),

inv_dist as
(Select
ParentSystemId,	
SystemId,
LedgerId,
VendorId,	
VendorSiteID,
OrganisationId,
LegalEntityId,	
AccountsPayCodeCombinationId,
PayGroupLookupCode,	
PaymentMethodName,
TermsId,
PaymentTerms,
InvoiceTypeLookupCode,	
Source,	
EXTRACT(YEAR FROM dist.GlDate) as GLDateYear, 
EXTRACT(QUARTER FROM dist.GlDate) as GLDateQuarter,
EXTRACT(MONTH FROM dist.GlDate) as GLDatePeriodNum,
upper(FORMAT_DATETIME('%b-%y', dist.GlDate)) as GLDatePeriod,	
InvoiceDateYear,	
InvoiceDateQuarter,	
InvoiceDatePeriodNum,	
InvoiceDatePeriod,	
CurrencyCode,	
count(distinct dist.invoiceid) as NumberOfInvoices,
count(case when CancelledDate is null then dist.invoiceid end) as NumberOfCancelledInvoices,
count(case when HoldLookupCode is not null then dist.invoiceid end) as NumberOfHoldInvoices,
sum(ifnull(case when rank =1 then InvoiceAmount else 0 end,0)) as InvoiceAmount,
sum(ifnull(case when rank =1 then InvoiceAmountUSD else 0 end,0)) as InvoiceAmountUSD,
sum(ifnull(case when rank =1 then AmountApplicableToDiscount else 0 end,0)) as AmountApplicableToDiscount,
sum(ifnull(case when rank =1 then DiscountAmountTaken else 0 end,0)) as DiscountAmountTaken,
sum(ifnull(case when rank =1 then AmountPaid else 0 end,0)) as AmountPaid,	
sum(ifnull(case when rank =1 then AmountPaidUSD else 0 end,0)) as AmountPaidUSD,	
sum(ifnull(case when rank =1 then NumberOfPayment else 0 end,0)) as NumberOfPayment,
sum(ifnull(case when rank =1 then NumberOfOnTimePayment else 0 end,0)) as NumberOfOnTimePayment,
sum(ifnull(case when rank =1 then NumberOfEarlyPayment else 0 end,0)) as NumberOfEarlyPayment,
sum(ifnull(case when rank =1 then NumberOfLatePayment else 0 end,0)) as NumberOfLatePayment,
sum(ifnull(case when rank =1 then NumberOfOverduePayment else 0 end,0)) as NumberOfOverduePayment,
sum(ifnull(case when rank =1 then OverdueAmount else 0 end,0)) as OverdueAmount,
sum(ifnull(case when rank =1 then OverdueAmountUSD else 0 end,0)) as OverdueAmountUSD,
sum(ifnull(case when rank =1 then InvoiceAmount else 0 end,0)) - sum(ifnull(case when rank=1 then AmountPaid else 0 end,0)) as BalanceAmount,
sum(ifnull(case when rank =1 then InvoiceAmountUSD else 0 end,0)) - sum(ifnull(case when rank=1 then AmountPaidUSD else 0 end,0)) as BalanceAmountUSD,
sum(ifnull(case when rank =1 then FreightAmount else 0 end,0)) as FreightAmount,			
InvoiceCreationYear,	
InvoiceCreationQuarter,	
InvoiceCreationPeriodNum,	
InvoiceCreationPeriod,	
sum(ifnull((case when RankInvoiceLine=1 then QuantityInvoiced else 0 end),0)) as QuantityInvoiced,
sum(ifnull((case when RankInvoiceLine=1 then LineAmount else 0 end),0)) as LineAmount,	
sum(ifnull((case when RankInvoiceLine=1 then LineAmountUSD else 0 end),0)) as LineAmountUSD,	
sum(DistributionAmount) as DistributionAmount,			
sum(DistributionAmountUSD) as DistributionAmountUSD,		
count(distinct QuickPurchaseOrderHeaderId) as NumberOfPurchaseOrder,
sum(ifnull((case when RankPOHeader=1 then PurchaseOrderHeaderAmount else 0 end),0)) as PurchaseOrderHeaderAmount,		
sum(ifnull(case when rank =1 then NumberOfRequisition else 0 end,0)) as NumberOfRequisition,
OperatingUnitName,				
'Dataflow Loader' as LoadBy,	
CURRENT_TIMESTAMP as LoadDate,	
'Corp_OracleEbs_BigQuery_AP_INVOICE_Aggregate' as LoadProcess	,	
'Dataflow Loader' as CreateBy,	
CURRENT_TIMESTAMP as CreateDate,	
'Corp_OracleEbs_BigQuery_AP_INVOICE_Aggregate' as CreateProcess,	
'Dataflow Loader' as UpdateBy,	
CURRENT_TIMESTAMP as UpdateDate,	
'Corp_OracleEbs_BigQuery_AP_INVOICE_Aggregate' as UpdateProcess,	
InactiveInd,	
InactiveDate,	
InactiveReason
from ${ref("EdwBI","Accounting_APInvoiceDistributions")} dist left outer join inv_sch
on dist.InvoiceId=inv_sch.InvoiceID
where  
InvoiceDateYear >= ifnull((SELECT MAX(InvoiceDateYear) FROM ${self()}),0)
group by
ParentSystemId,	
SystemId,	
VendorId,	
VendorSiteID,
OrganisationId,
LegalEntityId,	
AccountsPayCodeCombinationId,	
PayGroupLookupCode,	
PaymentMethodName,
TermsId,
PaymentTerms,
InvoiceTypeLookupCode,
Source,		
InvoiceDateYear,	
InvoiceDateQuarter,	
InvoiceDatePeriodNum,	
InvoiceDatePeriod,		
CurrencyCode,		
InvoiceCreationYear,	
InvoiceCreationQuarter,	
InvoiceCreationPeriodNum,	
InvoiceCreationPeriod,	
LedgerId,		
EXTRACT(YEAR FROM dist.GlDate),
EXTRACT(QUARTER FROM dist.GlDate),
EXTRACT(MONTH FROM dist.GlDate),
upper(FORMAT_DATETIME('%b-%y', dist.GlDate)),
OperatingUnitName,				
CURRENT_TIMESTAMP,
InactiveInd,	
InactiveDate,	
InactiveReason)

select 
ParentSystemId,	
SystemId,	
LedgerId,
VendorId,	
VendorSiteID,
OrganisationId,
LegalEntityId,
OperatingUnitName,	
AccountsPayCodeCombinationId,	
PayGroupLookupCode,			
PaymentMethodName,
TermsId,
PaymentTerms,
InvoiceTypeLookupCode,	
Source,	
GLDateYear, 
GLDateQuarter,
GLDatePeriodNum,
GLDatePeriod,	
InvoiceDateYear,	
InvoiceDateQuarter,	
InvoiceDatePeriodNum,	
InvoiceDatePeriod,	
CurrencyCode,	
NumberofInvoices,
NumberOfCancelledInvoices,
NumberOfHoldInvoices,
InvoiceAmount,
InvoiceAmountUSD,
AmountApplicableToDiscount,
DiscountAmountTaken,
AmountPaid,
AmountPaidUSD,	
NumberOfPayment,
NumberOfOnTimePayment,
NumberOfEarlyPayment,
NumberOfLatePayment,
NumberOfOverduePayment,
OverdueAmount,
OverdueAmountUSD,
BalanceAmount,
BalanceAmountUSD,
FreightAmount,
InvoiceCreationYear,	
InvoiceCreationQuarter,	
InvoiceCreationPeriodNum,	
InvoiceCreationPeriod,
QuantityInvoiced,
LineAmount,	
LineAmountUSD,	
DistributionAmount,
DistributionAmountUSD,				
NumberOfPurchaseOrder,
PurchaseOrderHeaderAmount,		
NumberOfRequisition,	
------------------------------------------QTDs by Invoice Date--------------------------------------------------------------------
sum(InvoiceAmount) over InvoiceDateQtd as InvoiceAmountQtdByInvoiceDate,
sum(InvoiceAmountUSD) over InvoiceDateQtd as InvoiceAmountUSDQtdByInvoiceDate,
sum(AmountPaid) over InvoiceDateQtd as AmountPaidQtdByInvoiceDate,
sum(AmountPaidUSD) over InvoiceDateQtd as AmountPaidUSDQtdByInvoiceDate,		
sum(NumberOfPayment) over InvoiceDateQtd as NumberOfPaymentQtdByInvoiceDate,
sum(NumberOfOnTimePayment) over InvoiceDateQtd as NumberOfOnTimePaymentQtdByInvoiceDate,
sum(NumberOfEarlyPayment) over InvoiceDateQtd as NumberOfEarlyPaymentQtdByInvoiceDate,
sum(NumberOfLatePayment) over InvoiceDateQtd as NumberOfLatePaymentQtdByInvoiceDate,
sum(NumberOfOverduePayment) over InvoiceDateQtd as NumberOfOverduePaymentQtdByInvoiceDate,
sum(OverdueAmount) over InvoiceDateQtd as OverdueAmountQtdByInvoiceDate,
sum(OverdueAmountUSD) over InvoiceDateQtd as OverdueAmountUSDQtdByInvoiceDate,
sum(BalanceAmount) over InvoiceDateQtd as BalanceAmountQtdByInvoiceDate,
sum(BalanceAmountUSD) over InvoiceDateQtd as BalanceAmountUSDQtdByInvoiceDate,
sum(QuantityInvoiced) over InvoiceDateQtd as QuantityInvoicedQtdByInvoiceDate,
sum(LineAmount) over InvoiceDateQtd as LineAmountUSDQtdByInvoiceDate,	
sum(LineAmountUSD) over InvoiceDateQtd as LineAmountQtdByInvoiceDate,	
sum(DistributionAmount) over InvoiceDateQtd as DistributionAmountQtdByInvoiceDate,
sum(DistributionAmountUSD) over InvoiceDateQtd as DistributionAmountUSDQtdByInvoiceDate,				
sum(NumberOfPurchaseOrder) over InvoiceDateQtd as NumberOfPurchaseOrderQtdByInvoiceDate,
sum(PurchaseOrderHeaderAmount) over InvoiceDateQtd as PurchaseOrderAmountQtdByInvoiceDate,		
sum(NumberOfRequisition) over InvoiceDateQtd as NumberOfRequisitionQtdByInvoiceDate,
------------------------------------------YTDs by Invoice Date--------------------------------------------------------------------
sum(InvoiceAmount) over InvoiceDateYtd as InvoiceAmountYtdByInvoiceDate,
sum(InvoiceAmountUSD) over InvoiceDateYtd as InvoiceAmountUSDYtdByInvoiceDate,
sum(AmountPaid) over InvoiceDateYtd as AmountPaidYtdByInvoiceDate,	
sum(AmountPaidUSD) over InvoiceDateYtd as AmountPaidUSDYtdByInvoiceDate,	
sum(NumberOfPayment) over InvoiceDateYtd as NumberOfPaymentYtdByInvoiceDate,
sum(NumberOfOnTimePayment) over InvoiceDateYtd as NumberOfOnTimePaymentYtdByInvoiceDate,
sum(NumberOfEarlyPayment) over InvoiceDateYtd as NumberOfEarlyPaymentYtdByInvoiceDate,
sum(NumberOfLatePayment) over InvoiceDateYtd as NumberOfLatePaymentYtdByInvoiceDate,
sum(NumberOfOverduePayment) over InvoiceDateYtd as NumberOfOverduePaymentYtdByInvoiceDate,
sum(OverdueAmount) over InvoiceDateYtd as OverdueAmountYtdByInvoiceDate,
sum(OverdueAmountUSD) over InvoiceDateYtd as OverdueAmountUSDYtdByInvoiceDate,
sum(BalanceAmount) over InvoiceDateYtd as BalanceAmountYtdByInvoiceDate,
sum(BalanceAmountUSD) over InvoiceDateYtd as BalanceAmountUSDYtdByInvoiceDate,
sum(QuantityInvoiced) over InvoiceDateYtd as QuantityInvoicedYtdByInvoiceDate,
sum(LineAmount) over InvoiceDateYtd as LineAmountYtdByInvoiceDate,	
sum(LineAmountUSD) over InvoiceDateYtd as LineAmountUSDYtdByInvoiceDate,	
sum(DistributionAmount) over InvoiceDateYtd as DistributionAmountYtdByInvoiceDate,
sum(DistributionAmountUSD) over InvoiceDateYtd as DistributionAmountUSDYtdByInvoiceDate,				
sum(NumberOfPurchaseOrder) over InvoiceDateYtd as NumberOfPurchaseOrderYtdByInvoiceDate,
sum(PurchaseOrderHeaderAmount) over InvoiceDateYtd as PurchaseOrderAmountYtdByInvoiceDate,		
sum(NumberOfRequisition) over InvoiceDateYtd as NumberOfRequisitionYtdByInvoiceDate,	
------------------------------------------QTDs by Invoice Creation Date--------------------------------------------------------------------
sum(InvoiceAmount) over InvoiceCreationDateQtd as InvoiceAmountQtdByInvoiceCreationDate,
sum(InvoiceAmountUSD) over InvoiceCreationDateQtd as InvoiceAmountUSDQtdByInvoiceCreationDate,
sum(AmountPaid) over InvoiceCreationDateQtd as AmountPaidQtdByInvoiceCreationDate,	
sum(AmountPaidUSD) over InvoiceCreationDateQtd as AmountPaidUSDQtdByInvoiceCreationDate,	
sum(NumberOfPayment) over InvoiceCreationDateQtd as NumberOfPaymentQtdByInvoiceCreationDate,
sum(NumberOfOnTimePayment) over InvoiceCreationDateQtd as NumberOfOnTimePaymentQtdByInvoiceCreationDate,
sum(NumberOfEarlyPayment) over InvoiceCreationDateQtd as NumberOfEarlyPaymentQtdByInvoiceCreationDate,
sum(NumberOfLatePayment) over InvoiceCreationDateQtd as NumberOfLatePaymentQtdByInvoiceCreationDate,
sum(NumberOfOverduePayment) over InvoiceCreationDateQtd as NumberOfOverduePaymentQtdByInvoiceCreationDate,
sum(OverdueAmount) over InvoiceCreationDateQtd as OverdueAmountQtdByInvoiceCreationDate,
sum(OverdueAmountUSD) over InvoiceCreationDateQtd as OverdueAmountUSDQtdByInvoiceCreationDate,
sum(BalanceAmount) over InvoiceCreationDateQtd as BalanceAmountQtdByInvoiceCreationDate,
sum(BalanceAmountUSD) over InvoiceCreationDateQtd as BalanceAmountUSDQtdByInvoiceCreationDate,
sum(QuantityInvoiced) over InvoiceCreationDateQtd as QuantityInvoicedQtdByInvoiceCreationDate,
sum(LineAmount) over InvoiceCreationDateQtd as LineAmountQtdByInvoiceCreationDate,	
sum(LineAmountUSD) over InvoiceCreationDateQtd as LineAmountUSDQtdByInvoiceCreationDate,
sum(DistributionAmount) over InvoiceCreationDateQtd as DistributionAmountQtdByInvoiceCreationDate,
sum(DistributionAmountUSD) over InvoiceCreationDateQtd as DistributionAmountUSDQtdByInvoiceCreationDate,					
sum(NumberOfPurchaseOrder) over InvoiceCreationDateQtd as NumberOfPurchaseOrderQtdByInvoiceCreationDate,
sum(PurchaseOrderHeaderAmount) over InvoiceCreationDateQtd as PurchaseOrderAmountQtdByInvoiceCreationDate,		
sum(NumberOfRequisition) over InvoiceCreationDateQtd as NumberOfRequisitionQtdByInvoiceCreationDate,
------------------------------------------YTDs by Invoice Creation Date--------------------------------------------------------------------
sum(InvoiceAmount) over InvoiceCreationDateYtd as InvoiceAmountYtdByInvoiceCreationDate,
sum(InvoiceAmountUSD) over InvoiceCreationDateYtd as InvoiceAmountUSDYtdByInvoiceCreationDate,
sum(AmountPaid) over InvoiceCreationDateYtd as AmountPaidYtdByInvoiceCreationDate,	
sum(AmountPaidUSD) over InvoiceCreationDateYtd as AmountPaidUSDYtdByInvoiceCreationDate,	
sum(NumberOfPayment) over InvoiceCreationDateYtd as NumberOfPaymentYtdByInvoiceCreationDate,
sum(NumberOfOnTimePayment) over InvoiceCreationDateYtd as NumberOfOnTimePaymentYtdByInvoiceCreationDate,
sum(NumberOfEarlyPayment) over InvoiceCreationDateYtd as NumberOfEarlyPaymentYtdByInvoiceCreationDate,
sum(NumberOfLatePayment) over InvoiceCreationDateYtd as NumberOfLatePaymentYtdByInvoiceCreationDate,
sum(NumberOfOverduePayment) over InvoiceCreationDateYtd as NumberOfOverduePaymentYtdByInvoiceCreationDate,
sum(OverdueAmount) over InvoiceCreationDateYtd as OverdueAmountYtdByInvoiceCreationDate,
sum(OverdueAmountUSD) over InvoiceCreationDateYtd as OverdueAmountUSDYtdByInvoiceCreationDate,
sum(BalanceAmount) over InvoiceCreationDateYtd as BalanceAmountYtdByInvoiceCreationDate,
sum(BalanceAmountUSD) over InvoiceCreationDateYtd as BalanceAmountUSDYtdByInvoiceCreationDate,
sum(QuantityInvoiced) over InvoiceCreationDateYtd as QuantityInvoicedYtdByInvoiceCreationDate,
sum(LineAmount) over InvoiceCreationDateYtd as LineAmountYtdByInvoiceCreationDate,	
sum(LineAmountUSD) over InvoiceCreationDateYtd as LineAmountUSDYtdByInvoiceCreationDate,	
sum(DistributionAmount) over InvoiceCreationDateYtd as DistributionAmountYtdByInvoiceCreationDate,		
sum(DistributionAmountUSD) over InvoiceCreationDateYtd as DistributionAmountUSDYtdByInvoiceCreationDate,				
sum(NumberOfPurchaseOrder) over InvoiceCreationDateYtd as NumberOfPurchaseOrderYtdByInvoiceCreationDate,
sum(PurchaseOrderHeaderAmount) over InvoiceCreationDateYtd as PurchaseOrderAmountYtdByInvoiceCreationDate,		
sum(NumberOfRequisition) over InvoiceCreationDateYtd as NumberOfRequisitionYtdByInvoiceCreationDate,											
LoadBy,	
LoadDate,	
LoadProcess	,	
CreateBy,	
CreateDate,	
CreateProcess,	
UpdateBy,	
UpdateDate,	
UpdateProcess,	
InactiveInd,	
InactiveDate,	
InactiveReason
from
inv_dist
WINDOW
  InvoiceDateQtd AS (
    PARTITION BY LedgerId,VendorId,VendorSiteId,LegalEntityId,OperatingUnitName,AccountsPayCodeCombinationId,PayGroupLookupCode,PaymentMethodName,TermsId,InvoiceTypeLookupCode,Source, CurrencyCode,InvoiceDateYear,InvoiceDateQuarter
    ORDER BY InvoiceDatePeriodNum
  ),
    InvoiceDateYtd AS (
    PARTITION BY LedgerId,VendorId,VendorSiteId,LegalEntityId,OperatingUnitName,AccountsPayCodeCombinationId,PayGroupLookupCode,PaymentMethodName,TermsId,InvoiceTypeLookupCode,Source, CurrencyCode,InvoiceDateYear
    ORDER BY InvoiceDatePeriodNum
  ),
  InvoiceCreationDateQtd AS (
    PARTITION BY LedgerId,VendorId,VendorSiteId,LegalEntityId,OperatingUnitName,AccountsPayCodeCombinationId,PayGroupLookupCode,PaymentMethodName,TermsId,InvoiceTypeLookupCode,Source, CurrencyCode,InvoiceCreationYear,InvoiceCreationQuarter
    ORDER BY InvoiceCreationPeriodNum
  ),
  InvoiceCreationDateYtd AS (
    PARTITION BY LedgerId,VendorId,VendorSiteId,LegalEntityId,OperatingUnitName,AccountsPayCodeCombinationId,PayGroupLookupCode,PaymentMethodName,TermsId,InvoiceTypeLookupCode,Source, CurrencyCode,InvoiceCreationYear
    ORDER BY InvoiceCreationPeriodNum
  )