---------------------------------------------------------------------
-- Edw.Accounting_AssetTransactions.sqlx Loading script using Dataform
---------------------------------------------------------------------
config {
  type: "incremental",
  schema: "Edw",
  tags: ["Finance-OracleDetail"],
  uniqueKey: ["TransactionHeaderIdIn","AssetNumber","AssetInvoiceId","LocationId","CodeCombinationId","InvoiceNumber"],

  assertions:{
    uniqueKey: ["TransactionHeaderIdIn","AssetNumber","AssetInvoiceId","LocationId","CodeCombinationId","InvoiceNumber"],
    nonNull:["BookTypeCode","AssetId","TransactionHeaderIdIn","DatePlacedInService"],
   
  }
}

with fid as
(select 
fai.asset_id as AssetId,
fai.asset_invoice_id as AssetInvoiceId,
fai.feeder_system_name as FeederSystemName, 
fai.invoice_number as InvoiceNumber,   
fai.invoice_id as InvoiceId,  
fai.invoice_line_number as InvoiceLineNumber,     
fai.invoice_date as InvoiceDate,
inv.org_id as OrgId,
inv.vendor_id as VendorId,
inv.vendor_site_id as VendorSiteId,    
fai.po_number as PurchaseOrderNumber, 
sum(fai.payables_cost) as InvoiceAmount
from ${ref("OracleEbs-FA_ASSET_INVOICES")} fai
left outer join ${ref("OracleEbs-AP_INVOICES_ALL")} inv on fai.invoice_id=inv.invoice_id and inv.InactiveInd=false
where fai.InactiveInd=false
group by
fai.asset_id,
fai.asset_invoice_id,
fai.feeder_system_name, 
fai.invoice_number, 
fai.invoice_id,    
fai.invoice_line_number,     
fai.invoice_date,
inv.org_id,
inv.vendor_id,
inv.vendor_site_id,    
fai.po_number 
),
fdh as 
(
select
asset_id as AssetId,
book_type_code as BookTypeCode,
code_combination_id as CodeCombinationId,
location_id as LocationId
from
${ref("OracleEbs-FA_DISTRIBUTION_HISTORY")}
where
InactiveInd=false and
current_date between date(date_effective) and ifnull (date(date_ineffective),current_date)
qualify row_number () over (partition by asset_id,book_type_code,CodeCombinationId,LocationId order by DATE_EFFECTIVE desc)=1
),
retir as
(Select
asset_id as AssetId,
book_type_code as BookTypeCode,
(case when transaction_header_id_out is null then 'N' else case when current_date>date(date_retired) then 'Y' else 'N' end end) as PartialRetired,
date_retired as RetirementDate,     
ifnull (units, 0) as UnitsRetired,     
NBV_RETIRED as NetBookValueRetired 
from ${ref("OracleEbs-FA_RETIREMENTS")}
where
InactiveInd=false
qualify row_number () over (partition by asset_id,book_type_code order by DATE_EFFECTIVE desc) = 1
),
dprns as
(Select
asset_id as AssetId,
book_type_code as BookTypeCode,
ifnull(ADJUSTED_COST,0) as AdjustedCost,
ifnull(DEPRN_AMOUNT,0) as DepreciationAmount,
ifnull(YTD_DEPRN,0) as YtdDepreciationAmount,
ifnull (deprn_reserve, 0) as DepreciationReserveAmount
from ${ref("OracleEbs-FA_DEPRN_SUMMARY")}
where
InactiveInd=false
qualify row_number () over (partition by asset_id,book_type_code order by period_counter desc) = 1
)  

SELECT  
books.ParentSystemId,	
books.SystemId,     
books.book_type_code as BookTypeCode,  
books.asset_id as AssetId,   
asset.asset_number as AssetNumber,    
asset.asset_category_id as AssetCategoryId,   
assettl.description as AssetDescription,  
asset.asset_type as AssetType,
asset.manufacturer_name as ManufacturerName,
asset.tag_number as TagNumber,     
asset.serial_number as SerialNumber,
asset.model_number as ModelNumber,
asset.property_type_code as PropertyTypeCode,
asset.in_use_flag as InUseFlag,
asset.owned_leased as OwnedOrLeased,
asset.current_units as TotalUnits,  
books.date_effective as DateEffective,
deprn_start_date as DepreciationStartDate,
books.deprn_method_code as DepreciationMethodCode,
methd.name as MethodName,
books.capitalize_flag as CapitalizeFlag,
books.depreciate_flag as DepreciateFlag,
books.transaction_header_id_in as TransactionHeaderIdIn,
books.retirement_pending_flag as RetirementPendingFlag,
retir.PartialRetired,     
(case when upper(books.retirement_pending_flag)='YES' then 'Y' else 'N' end) as FullyRetired,     
bookc.set_of_books_id as LedgerId,
books.period_counter_capitalized as PeriodCounterCapitalized ,
ifnull(books.life_in_months, 0) as TotalLifeInMonths, 
books.period_counter_fully_retired as PeriodCounterFullRetired,    
ifnull(books.life_in_months, 0) - date_diff(DATE(books.date_effective),DATE(books.date_placed_in_service),MONTH) as RemainingLifeInMonths, 
ifnull(books.original_cost,0) as AssetOriginalCost,  
ifnull(books.COST,0) as AssetCurrentCost,     
ifnull(dprns.AdjustedCost,0) as AdjustedCost,
ifnull(dprns.DepreciationAmount,0) as DepreciationAmount,
ifnull(dprns.YtdDepreciationAmount,0) as YtdDepreciationAmount,
ifnull(dprns.DepreciationReserveAmount,0) as DepreciationReserveAmount,      
ifnull (books.original_cost, 0) - ifnull (dprns.DepreciationReserveAmount, 0) as NetBookValue,     
books.date_placed_in_service as DatePlacedInService,      
books.prorate_convention_code as ProrateConvention,     
books.prorate_date as ProrateDate,    
asset.attribute3 as ConvertedAssetNumber,     
retir.RetirementDate,     
retir.UnitsRetired,     
retir.NetBookValueRetired,      
asset.creation_date as CapitalizationDate,       
asset.attribute4 as ProjectCCode,   
fdh.CodeCombinationId,
fdh.LocationId,    
fid.AssetInvoiceId,
fid.InvoiceId,
fid.FeederSystemName, 
fid.InvoiceNumber,     
fid.InvoiceLineNumber,     
fid.InvoiceDate,
fid.OrgId as OrganizationId,
fid.VendorId,
fid.VendorSiteId,      
fid.PurchaseOrderNumber,
fid.InvoiceAmount,    
row_number () over(partition by fdh.AssetId,fdh.BookTypeCode order by fdh.LocationId) as RankLocation, 
row_number () over(partition by fid.AssetId,books.book_type_code,fdh.LocationId order by fid.AssetInvoiceId) as RankAssetInvoice,
books.LoadBy,	
books.LoadDate,	
books.LoadProcess,	
books.CreateBy,	
books.CreateDate,	
books.CreateProcess,	
books.UpdateBy,	
books.UpdateDate,	
books.UpdateProcess,	
books.InactiveInd,	
books.InactiveDate,	
books.InactiveReason
FROM 
${ref("OracleEbs-FA_BOOKS")} books left outer join ${ref("OracleEbs-FA_BOOK_CONTROLS")} bookc on bookc.book_type_code = books.book_type_code and bookc.InactiveInd=false 
left outer join ${ref("OracleEbs-FA_ADDITIONS_B")} asset on books.asset_id = asset.asset_id and asset.InactiveInd=false 
left outer join  ${ref("OracleEbs-FA_ADDITIONS_TL")} assettl on asset.asset_id=assettl.asset_id  and assettl.language='US'and assettl.source_lang='US' and assettl.InactiveInd=false 
left outer join  fid on books.asset_id = fid.AssetId
left outer join  dprns on books.asset_id=dprns.AssetId and books.book_type_code = dprns.BookTypeCode 
left outer join  retir on books.asset_id=retir.AssetId and books.book_type_code=retir.BookTypeCode       
left outer join  fdh on books.asset_id = fdh.AssetId and books.book_type_code=fdh.BookTypeCode
left outer join ${ref("OracleEbs-FA_METHODS")} methd on books.deprn_method_code = methd.method_code and ifnull(books.life_in_months, -99) = ifnull (methd.life_in_months, -99) and methd.InactiveInd=false                  
WHERE   books.TRANSACTION_HEADER_ID_OUT IS NULL and
DATE(books.LoadDate) > ifnull((SELECT DATE(MAX(LoadDate)) FROM ${self()}),'1900-01-01')	